<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>WebGL Nehe Three.js - Intro</title>
	<link rel="stylesheet" type="text/css" href="../css/base.css" />
	<link rel="stylesheet" type="text/css" href="../css/fixed.css" />

	<meta name="viewport" content="width=576, height=1024"/>
</head>
<body>
<div class="fxl_content" >

	<p>The early efforts were based on many different hardware platforms, many with dedicated 3D hardware, or specialized
	CPUs that were used to render the 3D software, however, in the late 90s came the advent of the 
	GPU, from NVidia and others.  These chips revolutionized 3D rendering. They didn't consist of one or more central
	processors.  Instead, they were highly parallel, comprising hundreds of 
	processor units that can work in parallel. This immense change led to a major evolution of OpenGL</p>
	
	<p>The original architecture of OpenGL was based on relatively high level constructs (fixed-function APIs) that were intended to 
	hide the underlying	hardware.  So one could specify shapes, colors, etc. in a way that made sense to a human. On the other hand, 
	the GPUs were 
	so different that the old way of specifying shapes didn't map to the GPUs.  So instead, a new intermediate language, the shader 
	language arose.  The original OpenGL was then superseded by the new OpenGL based on shader languages, OpenGL-ESL (extended shader 
	language).  This was great in one way, but writing programs in shader language was not for the faint-hearted and because all 
	execution occurred on the GPUs, it was very hard to debug.</p>
	
	<p>While all this was going on, the Web continued to explode, with HTML5, CSS3 and SVG.  And because the cost of GPUs was falling 
	(following Moore's law) the power of 3D was starting to reach even low-powered, relatively cheap phones and tablets. This was great, 
	but there needed a reasonable, Web-based way to access that functionality.  This led to the development of WebGL, which was originally
	developed out of Mozilla, but is now standardized by the Khronos group, like OpenGL.  The WebGL APIs are not fixed-function APIs, but are 
	instead shader APIs</p>
	
	<h4>Architecture of WebGL and Three.js</h4>
	<p>WebGL is designed to support use of the 
	GPUs via JavaScript and shader language.  However, using the GPU via the direct APIs 
	defined by WebGL is difficult.  There was obviously a need for some easier way to use all this power and put it 
	into the hands of WEB developers who might know JavaScript but had no desire to 
	learn how to program in shader language.   </p> 
	<p> Several efforts have been made to create 
	a JavaScript library that provided higher level APIs that would allow Web developers 
	to access the 3D capabilities. One of the most complete and popular at present is three.js. 
	</p>
	<p>
	The approach of three.js is based on a scene-graph approach.  A scene can be thought of exactly that:  a stage on 
	which the user sets up the components to viewed, configures lights, cameras and other parts of the "stage".  Then those 
	components can be modified or animated as desired.
	</p>
	
	
	
</div>	
<div id="left"/><div id="right"/><div id="top"/><div id="bottom"/>
</body>
</html>
